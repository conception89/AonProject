<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aonproject.admin.review.dao.ReviewDAO">
	<!-- <sql id="reviewCommon">
		select re_no, re_title, re_date, re_content
		from review
		<where>
			<if test="search=='re_title'">
				<![CDATA[ re_title like '%' || #{keyword} ||'%']]>
			</if>
			<if test="search=='re_content'">
				<![CDATA[ re_content like '%' || #{keyword} ||'%']]>
			</if>
			<if test="start_date!='' and end_date!=''">
				<![CDATA[ to_char(re_date, 'YYYY-MM-DD') between #{start_date} and #{end_date}]]>
			</if>
		</where>
	</sql> -->
	
	<!-- 리뷰 관리자 화면 리스트  -->
	<select id="reviewList" resultType="review" parameterType="review">
		select re_no, re_title, re_content, re_date, re_chk, m_no, p_no, re_name, rnum from 
			(select re_no, re_title, re_content, re_date, re_chk, m_no, p_no, re_name, rownum as rnum from 
				(select r1.re_no, re_title, re_content, to_char(re_date, 'YYYY-MM-DD HH24:MI:SS') as re_date, 
				re_chk, m_no, p_no, re_name, rownum as rnum from review r1 inner join (select max(re_no) re_no from review group by p_no) 
				r2 on r1.re_no = r2.re_no order by re_no desc) 
			where rownum <![CDATA[<=]]> #{end_data} order by re_chk asc) 
			where rnum <![CDATA[>=]]> #{start_data}
	</select>
	
	<!-- 리뷰 사용자 화면 리스트 -->
	<select id="reviewuserList" resultType="review" parameterType="review">
		select re_no, re_title, re_content, to_char(re_date, 'YYYY-MM-DD HH24:MI:SS') as re_date, 
				re_chk, m_no, p_no, re_name, o_no from review where p_no like #{p_no}||'%'
	</select>
	
	<!-- 리뷰 시퀀스 번호 중복 확인 -->
	<select id="selectReno" resultType="int">
		select review_seq.nextval from dual
	</select>
	
	<!-- 리뷰 시퀀스 번호를 얻기위해서 쓰는 것 -->
	<select id="reviewSelectNo" resultType="int">
		select re_no from review where re_no = #{re_no}
	</select>
	
	<!-- 회원번호와 상품번호를 가져와서 리뷰가 있는지 없는지 확인 -->
	<select id="confirmMno" resultType="int">
		select count(re_no) from review where m_no = #{m_no} and p_no like #{p_no}||'%'
	</select>
	
	<!-- 리뷰 글쓰기(중복있어서 확인가능) -->
	<insert id="reviewInsert" parameterType="review">		
		<selectKey order="BEFORE" keyProperty="p_no" >
			select p_no from product_order inner join (select max(o_no) o_no from product_order where m_no = #{m_no} and p_no like #{p_no}||'%') tt on tt.o_no = product_order.o_no 
		</selectKey>	
			insert into review(re_no, re_title, re_content, re_pwd, re_chk, m_no, p_no, o_no) 
			values(#{re_no}, #{re_title}, #{re_content}, #{re_pwd}, 0, #{m_no},  #{p_no}, (select max(o_no) o_no from product_order where m_no = #{m_no} and p_no like #{p_no}||'%'))
	</insert>
	
	<!-- <select id="reviewDetail" parameterType="review" resultType="review">
		select re_title, re_content, to_char(re_date, 'YYYY-MM-DD HH24:MI:SS') as re_date
		from review
		where re_no = #{re_no}
	</select> -->
	
	<!-- 비밀번호 확인 -->
	<select id="pwdConfirm" resultType="int" parameterType="review">
		select nvl((select 1 from review where re_no=#{re_no} and re_pwd=#{re_pwd}), 0)as state from dual
	</select>
	
	<!-- 수정폼 -->
	<update id="reviewUpdate" parameterType="review">
		update review set
			re_content = #{re_content},
			re_date = sysdate
		where re_no = #{re_no}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="reviewDelete" parameterType="int">
		delete from review where re_no=#{re_no}
	</delete>
	
	<!-- 리뷰 커멘트 달리면 1로 바뀜 -->
	<update id="rechkUpdate" parameterType="review">
		update review set 
			re_chk = 1
		where re_no = #{re_no}
	</update>
	
	<!-- 리뷰 모든 카운트 -->
	<select id="cntList" resultType="int">
		select count(*) from review
	</select>
	
	<!-- 회원 번호 얻기 위해서 쓰는 쿼리 -->
	<select id="mnoList" resultType="review">
		select m_no from member
	</select>
	
	<!-- 리뷰 등록 -->
	<insert id="reviewUserInsert" parameterType="review">
		<selectKey order="BEFORE" keyProperty="p_no" resultType="java.lang.String">
			select p_no from product_order inner join (select max(o_no) o_no from product_order where m_no = #{m_no} and p_no like #{p_no}||'%') tt on tt.o_no = product_order.o_no 
		</selectKey>
		insert into review(re_no, re_title, re_content, re_pwd, re_chk, m_no, p_no, o_no) 
			values(#{re_no}, #{re_title}, #{re_content}, #{re_pwd}, 0, #{m_no}, 
			(select p_no from product_order where o_no = (select * from (select o_no from product_order where m_no = #{m_no} and p_no like #{p_no}||'%' order by o_no asc) where rownum = 1))
			, (select * from (select o_no from product_order where m_no = #{m_no} and p_no like #{p_no}||'%' order by o_no asc) where rownum = 1))
	</insert>
	
	<!-- 리뷰 번호로 리뷰 내용 업뎃 -->
	<update id="reviewUserUpdate" parameterType="review">
		update review set
			re_content = #{re_content},
			re_date = sysdate
		where re_no = #{re_no}
	</update>
	
	<!-- 리뷰에서 작성자 아이디 얻기 위한 쿼리 -->
	<update id="InsertID" parameterType="review">
		update review set re_name = (select m_id from member where m_no = #{m_no}) 
	</update>
	
	<!-- 주문했는지 안했는지 조회하기 위해서 씀 -->
	<select id="reviewOrderConfirm" parameterType="review" resultType="String">
		<!-- select o_no from 
			(select p1.o_no from product_order p1, 
				(select nvl(count(*),0) as count from 
					(select count(o_no) from product_order where m_no = #{m_no} and p_no like #{p_no}||'%' and o_confirm = 'Y')) test 
						where m_no = #{m_no} and p_no like #{p_no}||'%' and o_confirm = 'Y' and  count != 0 order by o_no desc) where rownum = 1 -->
		select count(o_no) from product_order where m_no = #{m_no} and p_no like #{p_no}||'%' and o_confirm = 'Y'
	</select>
	
	<!--  리뷰를 작성했는지 안했는지 판단 -->
	<select id="reviewConfirm" resultType="int">
		select count(re_no) from review where m_no = #{m_no} and p_no like #{p_no}||'%' and o_no = ( select * from (select o_no from product_order where m_no = #{m_no} and p_no like #{p_no}||'%' order by o_no asc) where rownum = 1)
	</select>

	<!-- 마이페이지 리뷰 -->	
	<select id="myReview" resultType="review" parameterType="member">
		select * from(
	select rownum as rnum, p_no, re_title, re_content, re_date, pi_route, pi_file from(		
		select p_no, re_title, re_content, re_date, pi_route, pi_file from (select ppno, pno, pi_route, pi_file from (select min(pno) ppno, p_no pno from (select pno, substr(p_no, 1, instr(p_no, 'S') - 1) p_no from (select DISTINCT min(pi_no) pno, p_no from product_img group by(p_no))) group by (p_no)) inner join product_img on pi_no = ppno) end1
		inner join (select re_no, re_title, re_content, to_char(re_date, 'yyyy-MM-dd hh24:mm:ss') re_date, o_no, substr(p_no, 1, 7) p_no from review where m_no = #{m_no} order by re_no desc) end2 on pno = p_no order by re_no desc
	) where rownum <![CDATA[<=]]> #{end_data})
		where rnum <![CDATA[>=]]> #{start_data}
	</select>
	
	<!-- 마이페이지 리뷰 cnt -->
	<select id="myReviewCnt" resultType="java.lang.Integer" parameterType="member">	
		select nvl(count(*), 0) from (select p_no, re_title, re_content, re_date, pi_route, pi_file from 
			(select ppno, pno, pi_route, pi_file from (select min(pno) ppno, p_no pno from 
				(select pno, substr(p_no, 1, instr(p_no, 'S') - 1) p_no from (select DISTINCT min(pi_no) pno, p_no from product_img group by(p_no))) group by (p_no)) inner join product_img on pi_no = ppno) end1
				inner join (select re_no, re_title, re_content, to_char(re_date, 'yyyy-MM-dd hh24:mm:ss') re_date, o_no, substr(p_no, 1, 7) p_no from review where m_no = #{m_no} order by re_no desc) end2 on pno = p_no order by re_no desc)
	</select>
	
</mapper>